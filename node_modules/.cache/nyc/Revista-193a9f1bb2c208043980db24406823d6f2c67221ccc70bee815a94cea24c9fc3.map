{"version":3,"file":"/home/usuario/practicas/23mar/23MarzoPE103/src/Revista.ts","sources":["/home/usuario/practicas/23mar/23MarzoPE103/src/Revista.ts"],"names":[],"mappings":";;;AAEA,MAAa,OAAO;IAMI;IAAsB;IALlC,KAAK,CAAS;IACd,KAAK,CAAS;IACd,YAAY,GAAe,EAAE,CAAC;IAC9B,YAAY,GAAW,CAAC,CAAC;IAEjC,YAAoB,IAAY,EAAU,IAAY;QAAlC,SAAI,GAAJ,IAAI,CAAQ;QAAU,SAAI,GAAJ,IAAI,CAAQ;QAClD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,eAAe;QACX,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,eAAe;QACX,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,oCAAoC;IACpC,SAAS,CAAC,QAAkB;QACxB,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC/D;aAAI;YACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACpC;IACL,CAAC;IAED,iDAAiD;IACjD,WAAW,CAAC,UAAoB;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACpD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SAC3D;aAAI;YACD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACtC;IACL,CAAC;IAED,yEAAyE;IACzE,MAAM;QACF,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,mDAAmD;IACnD,iBAAiB;QACb,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,yGAAyG,CAAC,CAAC;QACvH,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;CACJ;AAzDD,0BAyDC","sourcesContent":["import {Observer, Observable} from \"./Observer\"\n\nexport class Revista implements Observable{\n    private _name: string;\n    private _tema: string;\n    private suscriptores: Observer[] = [];\n    private ultimoNumero: number = 0;\n\n    constructor(private name: string, private tema: string){\n        this._name = name;\n        this._tema = tema;\n    }\n\n    getSuscriptores(){\n        return this.suscriptores;\n    }\n\n    getName(){\n        return this._name;\n    }\n\n    getTema(){\n        return this._tema;\n    }\n\n    getUltimoNumero(){\n        return this.ultimoNumero;\n    }\n\n    // Método para agregar un suscriptor\n    subscribe(observer: Observer): void{\n        if (this.suscriptores.includes(observer)) {\n            throw new Error(\"The observer had already been susbcribed\");\n        }else{\n            this.suscriptores.push(observer);\n        }\n    }\n\n    // Método para eliminar un suscriptor de la lista\n    unsubscribe(suscriptor: Observer) {\n        const index = this.suscriptores.indexOf(suscriptor);\n        if (index === -1) {\n            throw new Error(\"The observer has not been subscribed\");\n        }else{\n            this.suscriptores.splice(index, 1);\n        }\n    }\n    \n    // Método para notificar a los suscriptores sobre un nuevo número lanzado\n    notify() {\n        this.suscriptores.forEach((observer) => observer.update(this));\n    }\n    \n    // Método para lanzar un nuevo número de la revista\n    lanzarNuevoNumero() {\n        this.ultimoNumero++;\n        console.log(\"Se ha lanzado el número ${this.getUltimoNumero()} de la revista ${this._name} con el tema ${this._tema}\");\n        this.notify();\n    }\n}"]}